rollDice: サイコロを振る。1ゲームで1人あたり36回呼ばれる
printDice: 振られたサイコロをプレイヤーに表示する。rollDiceの直後に呼ばれる。
getHoldInput: 保持するサイコロを入力させる。構造体を受取り、その中の変数に格納する。
calculateScore: 保持されたサイコロを元にスコアを計算する。毎ターンで1回計算される。
printCategories: カテゴリーを表示する。冗長になるので関数として扱う。
updateScore: 計算されたカテゴリを元にプレイヤーの保持スコアを更新する。毎ターンに1度更新される。
printScore: すべてのゲームが終了後、最後に一度だけプレイヤーとそのスコアを表示する。
saveScoresToFile: printScoreが呼ばれたあと、ファイルにプレイヤーとスコアを出力する。



DiceState: サイコロの目を扱う。メンバ変数にサイコロの目を表すdice配列と保持するサイコロの添字を表すhold配列がある。例えばrollDiceではこの構造体型を引数として入力し、dice配列にランダムに生成したサイコロの目を格納する。hold配列は保持しないサイコロを0, 保持するサイコロを1と表現し、dice配列の添字と対応している。
Player: プレイヤーの状態を扱う。メンバ変数は各カテゴリのスコアを表すscores配列、そのプレイヤーの合計得点を表すtotalScore、使用済みのカテゴリを表すusedCategores配列がある。カテゴリは1~12で順番が保証されているので1つの配列で扱う。それぞれのカテゴリは一度しか使うことができないので、3つ目の配列で管理をする。
どちらの構造体もtypedefによって型になっているので関数の引数として受け取ることができる。


構造体を関数の引数として受け取りとき、参照渡しをするためにポインタを使用した。関数内で構造体のメンバ変数にアクセスするときはアロー演算子を使用してアクセスした。また、関数呼び出しの際の実引数はポインタを渡すためにアンパサンドを入れて呼び出す必要があった。



作成したヨットというゲームはスコアで勝敗が決まるゲームであるため、それに習ってスコア計算を行った。calculateScore関数はそのスコアを計算するための関数であり、カテゴリに沿った計算を行った。calculateScoreは処理にswitch文を使用して条件分岐を行っている。



サイコロを振る過程でランダム性を出した。もちろん現実のサイコロもランダムであり、それを時間によるシード値から生成した疑似乱数で再現した。ランダムな数を作る関数は小数で渡されるため、それを整数の1~6に潰す処理を行っている。
